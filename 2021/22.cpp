#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <utility>
#include <sstream>
#include <set>

#include <catch2/catch_test_macros.hpp>

using namespace std;

const vector<pair<bool, array<long, 6>>> inputSmallTest = {
    {true, {10, 12, 10, 12, 10, 12}},
    {true, {11, 13, 11, 13, 11, 13}},
    {false, {9, 11, 9, 11, 9, 11}},
    {true, {10, 10, 10, 10, 10, 10}}};

const vector<pair<bool, array<long, 6>>> inputTest = {
    {true, {-20, 26, -36, 17, -47, 7}},
    {true, {-20, 33, -21, 23, -26, 28}},
    {true, {-22, 28, -29, 23, -38, 16}},
    {true, {-46, 7, -6, 46, -50, -1}},
    {true, {-49, 1, -3, 46, -24, 28}},
    {true, {2, 47, -22, 22, -23, 27}},
    {true, {-27, 23, -28, 26, -21, 29}},
    {true, {-39, 5, -6, 47, -3, 44}},
    {true, {-30, 21, -8, 43, -13, 34}},
    {true, {-22, 26, -27, 20, -29, 19}},
    {false, {-48, -32, 26, 41, -47, -37}},
    {true, {-12, 35, 6, 50, -50, -2}},
    {false, {-48, -32, -32, -16, -15, -5}},
    {true, {-18, 26, -33, 15, -7, 46}},
    {false, {-40, -22, -38, -28, 23, 41}},
    {true, {-16, 35, -41, 10, -47, 6}},
    {false, {-32, -23, 11, 30, -14, 3}},
    {true, {-49, -5, -3, 45, -29, 18}},
    {false, {18, 30, -20, -8, -3, 13}},
    {true, {-41, 9, -7, 43, -33, 15}},
    {true, {-54112, -39298, -85059, -49293, -27449, 7877}},
    {true, {967, 23432, 45373, 81175, 27513, 53682}}};

const vector<pair<bool, array<long, 6>>> inputProblem = {
    {true, {-8, 36, -13, 38, -30, 18}},
    {true, {-21, 27, -43, 1, -28, 20}},
    {true, {-43, 8, -35, 16, -21, 29}},
    {true, {-14, 33, 1, 46, -33, 20}},
    {true, {-20, 24, -32, 18, -44, 3}},
    {true, {-31, 13, -24, 24, -13, 41}},
    {true, {-34, 17, -24, 25, -32, 21}},
    {true, {-21, 29, -40, 14, -34, 19}},
    {true, {-11, 41, -46, 3, -22, 25}},
    {true, {-13, 41, -20, 32, -26, 21}},
    {false, {34, 48, -8, 6, -47, -32}},
    {true, {-36, 16, -25, 29, -42, 10}},
    {false, {-27, -10, 20, 38, -32, -15}},
    {true, {-43, 7, -3, 46, -13, 41}},
    {false, {-21, -10, -5, 7, -34, -24}},
    {true, {-47, 2, -26, 19, -30, 19}},
    {false, {2, 18, 39, 48, 34, 49}},
    {true, {-29, 21, -28, 19, -14, 39}},
    {false, {-12, 1, -15, -6, -12, 5}},
    {true, {-33, 11, -5, 40, -19, 34}},
    {true, {4839, 37119, -77870, -65928, -31721, 6883}},
    {true, {-65074, -45532, -76161, -55995, 18422, 28809}},
    {true, {-19046, 7513, 65962, 85040, -50719, -38025}},
    {true, {31203, 42162, 42926, 64021, 25628, 44570}},
    {true, {-23080, -9369, 20501, 49221, 70364, 78911}},
    {true, {11385, 44807, 56888, 76379, 2197, 23866}},
    {true, {17447, 25479, -59366, -48603, -63221, -43855}},
    {true, {34953, 56079, -72829, -39611, 24187, 47582}},
    {true, {3553, 21317, -69977, -55642, 38791, 44119}},
    {true, {-57043, -43446, -62985, -45094, -46766, -23033}},
    {true, {-66953, -46125, 7548, 20111, 36275, 67691}},
    {true, {48156, 52160, -57159, -48177, -27750, -17451}},
    {true, {-8199, 9720, -71971, -52302, 33698, 55920}},
    {true, {-26740, -21116, -47606, -32902, -83414, -51593}},
    {true, {35163, 49358, -57959, -36064, 29918, 57157}},
    {true, {-7610, 15882, 31069, 43205, 50534, 76280}},
    {true, {-38397, -8880, 50925, 60954, 38695, 68136}},
    {true, {-22971, 3262, 63662, 94550, -23890, -3669}},
    {true, {56919, 85184, -24246, -10978, -45500, -14062}},
    {true, {70576, 93606, -3591, 16458, 12386, 39202}},
    {true, {-40810, -32824, 46441, 70619, -50354, -41110}},
    {true, {-44090, -21796, -49222, -29203, -78625, -53659}},
    {true, {4179, 22689, 62208, 95078, -32906, -2773}},
    {true, {41435, 58226, -69091, -52534, 11220, 22466}},
    {true, {44027, 56489, -61228, -40839, 24716, 49802}},
    {true, {58856, 89381, -24787, -6210, -38387, -21495}},
    {true, {31249, 66391, -338, 29577, -73616, -43844}},
    {true, {-69236, -35435, -56932, -41334, 10510, 37433}},
    {true, {-30489, 7293, 23785, 50236, -75453, -69050}},
    {true, {-44614, -24138, -14044, 4035, -80479, -57806}},
    {true, {75190, 96327, -32, 21796, -19982, 654}},
    {true, {-57769, -43737, -43364, -27692, 26689, 48069}},
    {true, {-33705, -1437, -50304, -33797, -65845, -40680}},
    {true, {-78406, -40654, 42549, 59337, -28001, -11767}},
    {true, {63318, 88223, -16500, -422, 7937, 12185}},
    {true, {-86159, -71499, 10841, 35268, -23323, 5521}},
    {true, {-69927, -48219, -54626, -22479, -44943, -15579}},
    {true, {-43768, -13251, -64205, -52022, -49650, -31322}},
    {true, {-66574, -54884, 17683, 44711, 31164, 56138}},
    {true, {72035, 82108, -3813, 10230, -2284, 15893}},
    {true, {37334, 58441, 51079, 61499, 18464, 27016}},
    {true, {-32585, -16545, 55965, 89671, 8302, 34498}},
    {true, {-26529, 3377, -29123, -20453, 56842, 83561}},
    {true, {32146, 54092, -35416, -9066, 51048, 69716}},
    {true, {-25194, 7525, -78242, -62921, -50241, -35907}},
    {true, {51949, 62077, 39590, 56347, -31891, -19806}},
    {true, {2190, 18191, -26549, -4898, 68835, 81165}},
    {true, {37501, 59670, -54043, -24397, 18589, 44711}},
    {true, {53124, 84011, -37865, -20884, 12749, 28642}},
    {true, {11469, 29443, -87115, -71637, 16152, 46608}},
    {true, {-11034, 2944, 3487, 21169, 74689, 82882}},
    {true, {19100, 25746, -61128, -36379, 43441, 71029}},
    {true, {5600, 38744, -7945, 6683, 66027, 94407}},
    {true, {68461, 75284, 8717, 26700, 15336, 51188}},
    {true, {-61283, -47763, 2607, 39967, 37842, 70865}},
    {true, {-45729, -24681, -21605, 549, 63515, 88818}},
    {true, {25798, 44610, 47822, 73500, -60521, -23985}},
    {true, {-95305, -75665, -26118, -5350, -12906, 15434}},
    {true, {33757, 57435, 42302, 67655, -54184, -23134}},
    {true, {2994, 22115, -88253, -58648, 28386, 48449}},
    {true, {-62548, -49059, -15737, 4824, 41511, 53585}},
    {true, {67083, 78970, 4211, 28190, -48739, -19705}},
    {true, {-78667, -54791, -46045, -26836, 24727, 53046}},
    {true, {54721, 85885, -8372, 21818, 29648, 43363}},
    {true, {69627, 90635, -20694, -18387, 7933, 32742}},
    {true, {-65893, -37568, -11991, 15161, -65829, -60748}},
    {true, {-57395, -46236, -2048, 13172, -70802, -56233}},
    {true, {-22043, 3715, 57559, 88108, -45280, -34414}},
    {true, {-74828, -53038, 46478, 58430, -19255, 10363}},
    {true, {13806, 37110, 33798, 59217, -64375, -61548}},
    {true, {61, 4442, -14980, 13830, -81808, -73388}},
    {true, {-44428, -22458, -30625, -10622, -66261, -46437}},
    {true, {61389, 79075, -55043, -35044, -31620, -5849}},
    {true, {1257, 22335, -92002, -65926, 23483, 35032}},
    {true, {-66071, -40860, -871, 30120, 47036, 74284}},
    {true, {18446, 32639, -16466, 3221, -89695, -56843}},
    {true, {-4829, 18965, -25609, -3292, -83328, -71836}},
    {true, {-51528, -12497, -36433, -10612, 67126, 82588}},
    {true, {-56346, -40152, 3846, 23474, 44670, 66145}},
    {true, {-31862, -23691, -90559, -67842, -35278, -9721}},
    {true, {-82636, -55468, 7393, 29473, 20855, 53140}},
    {true, {-23503, -10904, -71671, -43413, 39526, 74530}},
    {true, {-24286, -10051, 42535, 69016, 47293, 59326}},
    {true, {27107, 36075, -68197, -63740, -38325, -23137}},
    {true, {49700, 61611, -63668, -46517, -32392, -27815}},
    {true, {8270, 28696, 50213, 72279, -43392, -25307}},
    {true, {39641, 61962, -20666, -417, -81881, -48826}},
    {true, {12571, 33176, -14528, 8290, -89384, -70716}},
    {true, {-43871, -13117, -39900, -7197, 59502, 90659}},
    {true, {-36035, -2433, 65658, 84996, -33491, -14374}},
    {true, {63543, 80825, -6748, -2651, -58258, -19329}},
    {true, {28713, 46264, 3886, 14439, -90710, -60973}},
    {true, {-22187, 2425, 54328, 74307, 28523, 62729}},
    {true, {-44284, -19454, -77265, -62483, -24166, 4845}},
    {true, {-3490, 10486, -85697, -76511, 5917, 20496}},
    {true, {-24962, 2419, 11207, 27000, 61253, 96386}},
    {true, {52442, 59482, -41524, -22315, -68202, -48780}},
    {true, {-34407, 5096, -92571, -67584, -35286, -2042}},
    {true, {11100, 17929, -19300, 4676, 58434, 88671}},
    {true, {60823, 86913, -1593, 13586, -3558, 26423}},
    {true, {-54273, -37709, 28937, 38483, -62444, -46473}},
    {true, {-3663, 6115, -67350, -58585, -59265, -39858}},
    {true, {-33708, -26120, 62411, 80951, -50679, -28890}},
    {true, {54088, 78257, -30377, 5547, -54962, -42452}},
    {true, {-51040, -15145, -75083, -71823, -7664, 22918}},
    {true, {-48121, -39943, 59649, 86399, -19305, 14422}},
    {true, {19442, 39564, 65372, 89430, -9881, 23180}},
    {true, {-5638, -504, 51726, 81303, 34865, 52668}},
    {true, {51177, 68510, -55462, -49393, -1676, 34025}},
    {true, {-39225, -13934, -44638, -21274, -69663, -61721}},
    {true, {-34256, -22300, -79410, -50706, 18119, 42580}},
    {true, {28326, 43362, -65829, -50909, -58284, -26939}},
    {true, {-60717, -46351, 16976, 39679, -47682, -36099}},
    {true, {-8972, -1099, -52473, -25319, -86121, -52942}},
    {true, {-61000, -39159, 49997, 78225, -23148, 1003}},
    {true, {58182, 82981, 44518, 56895, 3777, 5095}},
    {true, {6734, 28162, -86696, -58568, -24484, -2036}},
    {true, {58887, 76977, -39238, -25941, 39846, 46017}},
    {true, {24847, 30203, -67085, -34859, 41924, 66616}},
    {true, {20441, 43585, -92938, -64316, -31009, -1794}},
    {true, {-80785, -61417, -38919, -35032, -36530, -28271}},
    {true, {59377, 75712, 43560, 68823, -22599, -1614}},
    {true, {-1700, 13850, -4069, 2130, 63749, 86953}},
    {true, {-4952, 16715, 41882, 73610, -54756, -52305}},
    {true, {51595, 59284, -24107, -4393, -72363, -43891}},
    {true, {-27807, -3926, 26851, 45198, 49346, 82929}},
    {true, {12390, 34498, 63224, 91240, -5214, 800}},
    {true, {10873, 42647, -46607, -10385, 65246, 87490}},
    {true, {-62055, -38470, -21876, 173, -62808, -40393}},
    {true, {20224, 48752, -38586, -16511, -85733, -52651}},
    {true, {55784, 81552, -5619, 16327, 34077, 51185}},
    {true, {-3455, 10014, -85026, -65575, -26623, -11858}},
    {true, {-35708, -27267, -45850, -19818, -67455, -45823}},
    {true, {41827, 53199, 41230, 65698, 27015, 50197}},
    {true, {-6012, 4252, -72302, -66695, 36125, 47997}},
    {true, {49528, 64452, -58166, -30694, -13199, 4956}},
    {true, {9888, 29239, -68554, -54138, 18724, 56782}},
    {true, {-68870, -53794, -58759, -22882, 7742, 40403}},
    {true, {6972, 17377, -20708, -6722, -82963, -69421}},
    {true, {20367, 25651, 58345, 91004, -20550, 10387}},
    {true, {25694, 35176, 22099, 43134, -70032, -63879}},
    {true, {-45952, -11194, -81779, -67800, 8182, 23824}},
    {true, {62509, 80195, -21937, -2975, 5609, 20751}},
    {true, {-24032, -6383, 24506, 45121, 59690, 78556}},
    {true, {-51599, -38434, 30719, 51414, 36050, 73737}},
    {true, {58822, 68897, 7741, 15890, -51938, -32193}},
    {true, {-15039, 6906, -65212, -41797, 30699, 55624}},
    {true, {60817, 85926, 27886, 55706, -8663, 11830}},
    {true, {15206, 34437, 30959, 54489, 57564, 71609}},
    {true, {35392, 53432, 22100, 27886, -71711, -46618}},
    {true, {-63155, -33316, 2506, 33937, 53928, 70435}},
    {true, {39063, 66505, 25641, 56117, -52530, -39376}},
    {true, {-25070, -14807, -94850, -59369, -15595, 12932}},
    {true, {-83108, -73279, -39576, -1760, -6745, 24559}},
    {true, {-18659, 1714, 65445, 79434, 39458, 61966}},
    {true, {-73934, -43865, -53154, -30276, -31417, -14432}},
    {true, {8399, 36820, -5066, -746, 62811, 89658}},
    {true, {51461, 58467, 21289, 47244, -48496, -34141}},
    {true, {-31677, -15125, 65258, 94618, -11983, 21397}},
    {true, {-59850, -45075, 46471, 73073, 33142, 52196}},
    {true, {-38957, -29818, 40316, 50247, 45129, 64145}},
    {true, {-17719, 3143, -99029, -70583, -15275, -3260}},
    {true, {-20122, -5655, -68173, -47607, 27797, 47630}},
    {true, {-77283, -55700, 852, 31360, 32087, 48207}},
    {true, {28846, 48388, 63096, 85300, -30595, -3844}},
    {true, {-82363, -49209, -51315, -42669, -5472, 13974}},
    {true, {-33522, -24893, 54281, 60638, -48809, -29636}},
    {true, {-72223, -48831, -46560, -25806, 36517, 53330}},
    {true, {-49478, -43471, -11706, 10889, -80068, -54930}},
    {true, {-55073, -36710, 66679, 68786, -21283, -7896}},
    {true, {23706, 37729, 15047, 43923, -72897, -65979}},
    {true, {17181, 28459, 62283, 83521, -31363, -8226}},
    {true, {-16143, 9900, 27489, 59106, 59096, 76947}},
    {true, {3206, 10671, -14400, 10991, -95245, -69938}},
    {true, {56347, 81552, -25300, -8107, 19105, 50434}},
    {true, {-78103, -66259, -37451, -32307, -33713, -2616}},
    {true, {30350, 59481, 29541, 51913, 39794, 66802}},
    {true, {-6369, 27626, 29467, 54642, -87761, -63038}},
    {true, {-75910, -44075, 8881, 33348, 39378, 53195}},
    {true, {-93870, -77120, -4549, 11366, 10630, 21270}},
    {true, {63828, 86196, 7557, 26186, -31651, -14082}},
    {true, {-45560, -23421, -57108, -50195, -46356, -35654}},
    {true, {27703, 38747, -64773, -61912, -50641, -19460}},
    {true, {-30255, -26778, -36213, -16183, -72571, -68332}},
    {true, {74470, 78456, -25411, 13731, 9282, 44191}},
    {true, {60166, 74998, -59027, -34355, 23594, 36628}},
    {true, {-34949, -18916, 48964, 60747, -65291, -40385}},
    {true, {41085, 68564, -51507, -22592, -48642, -22967}},
    {true, {-61218, -38261, -64826, -57227, -40284, -2183}},
    {true, {-63449, -37989, -39697, -27482, -74092, -51129}},
    {true, {9363, 31975, 55098, 78687, -52413, -40226}},
    {true, {-84308, -56837, -40246, -7996, -36362, -18607}},
    {true, {-72651, -66165, 9333, 15666, 25597, 51574}},
    {true, {17401, 47978, 9920, 42401, -70754, -58041}},
    {true, {-63217, -51951, -12225, 11075, 44022, 66562}},
    {true, {29053, 49545, -84344, -63035, -6015, 22142}},
    {true, {-71933, -39944, 23397, 41453, -51539, -33412}},
    {true, {37569, 61597, 43450, 53548, 22047, 45919}},
    {true, {8968, 35041, 59910, 84105, -52586, -33885}},
    {true, {-57379, -27352, -41555, -18843, 54181, 60564}},
    {false, {-14944, 13704, -58332, -46987, 52838, 63073}},
    {true, {-73816, -53118, -14780, 2920, -64505, -39848}},
    {false, {-39460, -353, -51496, -30749, 46316, 63357}},
    {true, {-85117, -60538, -36842, -15322, -52531, -16603}},
    {false, {7991, 31176, -73583, -52023, 32437, 48771}},
    {false, {8515, 30142, -77709, -62651, 17831, 46909}},
    {true, {-18303, 17378, -21032, -6623, 64638, 88783}},
    {true, {7339, 25764, -90496, -66449, -38251, -26490}},
    {false, {-70223, -46889, 4443, 35356, -42714, -28833}},
    {true, {-77805, -50387, 43932, 53069, -12411, -5379}},
    {false, {-72499, -45397, -53542, -41435, -3491, 21042}},
    {true, {10885, 19988, -41497, -7678, 55702, 84296}},
    {false, {50943, 59682, 9775, 27593, 41418, 52240}},
    {true, {-5512, 31721, 74926, 78902, -24035, -8858}},
    {true, {54750, 82645, 29855, 45661, 8586, 29144}},
    {false, {-78864, -55077, 6925, 16113, -59924, -27087}},
    {false, {9337, 38246, 60440, 66216, -47033, -39339}},
    {true, {-31403, -21142, -21908, -8535, -77524, -68441}},
    {false, {-48840, -15847, -67498, -39602, -67358, -37763}},
    {false, {-19834, 7437, -20737, 16009, -93797, -74007}},
    {false, {-61152, -39838, 52890, 67543, -394, 22101}},
    {true, {-80448, -55372, 1276, 22349, -50814, -32755}},
    {false, {44370, 73647, -55877, -35324, 26221, 47034}},
    {true, {46532, 57702, -13840, 3895, -69576, -50251}},
    {false, {-73517, -57384, 31351, 41680, 15220, 23322}},
    {true, {31166, 41044, -51591, -33043, -75269, -52116}},
    {true, {-56761, -45567, -54768, -32061, -60838, -46237}},
    {true, {-75017, -54994, -28885, -27479, -19257, 8285}},
    {false, {17363, 19964, -1700, 23699, 65227, 80609}},
    {true, {-72438, -53153, 33395, 60653, -27435, 1947}},
    {true, {67153, 86947, -39064, -13890, -24067, -7025}},
    {false, {-23935, -7756, 54756, 73703, -57803, -30333}},
    {true, {-94142, -68468, -38295, -14233, -2486, 8555}},
    {false, {-16941, 5265, 64250, 78153, 7680, 25578}},
    {false, {-96513, -66230, -4640, 29008, -10817, 10499}},
    {true, {-47541, -35822, -56040, -37593, 25295, 56913}},
    {false, {32696, 49773, -77640, -67246, -32741, -2933}},
    {true, {60031, 96079, -10285, 24947, -23593, 3651}},
    {false, {60668, 82205, 4890, 26483, -30306, 7631}},
    {false, {52550, 78640, -65700, -48087, -12117, 8780}},
    {false, {-30793, -2678, -45649, -34548, 66170, 81785}},
    {true, {3954, 24104, -77505, -64791, -47133, -20347}},
    {false, {-60663, -48533, 30758, 43913, 38074, 52867}},
    {false, {29598, 55875, 62594, 74543, -175, 18742}},
    {true, {7268, 15664, 64342, 81253, -39177, -11209}},
    {false, {50616, 71417, -7637, -11, -65773, -35786}},
    {false, {-85212, -54719, -45697, -20353, -40912, -7219}},
    {false, {51683, 61140, -16896, 8191, 56876, 63036}},
    {true, {63796, 81879, -6590, 10629, -17826, -13338}},
    {false, {-12462, 19923, 24812, 46240, 58581, 91722}},
    {false, {60238, 81783, 9597, 26586, 9422, 30485}},
    {true, {-50156, -28362, 28748, 53048, 51469, 66900}},
    {false, {69194, 89229, -1108, 23127, 25684, 56099}},
    {false, {-84146, -57909, -17501, 11445, 30089, 62555}},
    {true, {31618, 49715, 37591, 62455, 43947, 51429}},
    {false, {-3586, 19186, 69304, 92938, -20587, -9138}},
    {true, {-61199, -46598, 35967, 60395, -14556, 4590}},
    {false, {-10913, 14231, -30261, 1009, -84245, -76301}},
    {false, {60186, 89222, -3692, 33740, -25990, -8108}},
    {true, {36727, 54779, 43724, 59581, 27937, 65959}},
    {true, {31209, 44945, 42559, 57599, 39510, 49135}},
    {true, {-3245, 14976, -72819, -52510, 36034, 64484}},
    {true, {440, 28782, -11547, 4495, -98435, -74377}},
    {true, {-18198, 10563, -81024, -73403, -17198, 5796}},
    {true, {12612, 21502, -51647, -31132, -59647, -51386}},
    {true, {29495, 52571, 11017, 19714, 46828, 68700}},
    {true, {9809, 37561, -30853, -19860, -83128, -60062}},
    {false, {67691, 79085, -31154, 3105, -37577, -17350}},
    {true, {72836, 97051, -31514, -15790, -29704, 1797}},
    {true, {-87609, -69341, -18788, -2505, -12297, -10409}},
    {true, {20443, 43548, -62320, -37522, 38977, 60544}},
    {false, {-38964, -26257, 58268, 79198, 22960, 47406}},
    {true, {-73221, -48099, -41579, -12744, 41233, 55998}},
    {true, {39815, 61968, -25816, 2853, -84604, -48176}},
    {false, {43328, 47847, 50145, 81706, -20854, -17930}},
    {true, {42026, 55667, 2815, 18320, -71420, -56114}},
    {true, {-15046, 7093, -2067, 6846, -87205, -62415}},
    {false, {-47170, -12892, -70768, -49876, 15359, 40080}},
    {false, {-2457, 10461, 30411, 42007, -81116, -70962}},
    {false, {52522, 85711, -59582, -35527, -16966, 8482}},
    {true, {-46197, -25909, 47222, 78261, -50850, -32047}},
    {false, {19590, 34572, 72339, 87567, -5750, 28633}},
    {false, {47115, 83953, -18319, -1527, 36796, 53774}},
    {false, {-83826, -54856, -42413, -32997, 3733, 27276}},
    {true, {-56233, -44250, 49602, 74071, 22314, 30759}},
    {false, {63420, 86367, -10839, 17688, -58166, -41413}},
    {false, {-52818, -25004, 30897, 65041, 34334, 65736}},
    {false, {-37943, -1255, -31595, -17688, -79911, -66116}},
    {false, {-53072, -34686, -74173, -48306, 29767, 56394}},
    {true, {-52788, -31825, -32369, -19858, 48905, 63632}},
    {true, {-1350, 29555, -19635, -7074, -87305, -65879}},
    {false, {-20803, -15829, 21850, 48686, -81910, -49506}},
    {false, {6419, 36337, -72720, -64997, 9779, 35669}},
    {true, {-27678, -5611, -63057, -58292, -49298, -38857}},
    {true, {-25232, -8560, -36175, -7964, -79251, -62089}},
    {true, {3484, 8094, 60295, 74830, 19467, 40876}},
    {true, {25344, 49707, 55996, 61107, 27573, 40860}},
    {false, {47919, 70340, -21803, -8394, -48605, -36363}},
    {false, {-46037, -33978, 47245, 79330, -37903, -25173}},
    {false, {-71914, -46814, 2394, 17414, -64968, -46103}},
    {true, {19065, 32293, -81832, -70280, -14026, 1070}},
    {false, {-38512, -31573, 47413, 61535, 37582, 62106}},
    {true, {48305, 70579, -62027, -50478, -15171, 1424}},
    {false, {-75249, -57569, -35309, -10651, 33081, 55723}},
    {true, {25348, 44691, -63608, -38147, 40069, 50336}},
    {false, {29076, 42828, 43230, 71477, -50728, -30676}},
    {false, {-79502, -64190, -38572, -26384, -15092, 12199}},
    {true, {-23179, -7624, 48807, 73012, 33610, 40354}},
    {true, {-3592, 8389, 60961, 82397, -49081, -28054}},
    {false, {51476, 83453, 28705, 56528, -12926, 1967}},
    {true, {-27187, -19195, -82395, -52994, 21622, 43848}},
    {false, {-90506, -68537, -9823, 6672, 26454, 41372}},
    {false, {44140, 77814, -53839, -33067, 19437, 52037}},
    {false, {70486, 89103, -32008, -18702, -30582, -3135}},
    {false, {9812, 37159, -13683, 5581, 67454, 90785}},
    {true, {55516, 76011, 29943, 54363, -35505, -8311}},
    {true, {18107, 53089, 40166, 76403, -46033, -31026}},
    {true, {-44076, -28970, -69649, -38867, 31937, 54687}},
    {false, {-6903, 6265, -92551, -76965, 10824, 29131}},
    {false, {-73096, -47990, -40737, -12561, -56032, -37870}},
    {false, {-69834, -46771, -11406, 9831, -70442, -38701}},
    {false, {-63167, -28547, -2453, 13753, -73159, -51770}},
    {false, {-12546, -4517, -90466, -67177, -45521, -19870}},
    {true, {-29818, -1746, 50057, 67629, 41692, 53982}},
    {true, {-84294, -59113, 33649, 49960, -514, 23937}},
    {false, {-57940, -53375, 17137, 29536, -66645, -34791}},
    {true, {-45417, -13403, -22323, 12972, 56661, 78987}},
    {true, {37008, 53186, -52723, -32702, -81286, -61118}},
    {false, {62401, 92686, -32370, -8632, 3648, 32213}},
    {true, {46130, 54088, 12139, 21408, 60375, 72557}},
    {true, {-78284, -60622, -60558, -34232, 3228, 21753}},
    {false, {-26367, -17693, -44140, -38359, -76315, -54921}},
    {true, {-50778, -25901, -62396, -47707, -46585, -24121}},
    {true, {-31891, -7439, -38110, -6297, -83562, -54313}},
    {true, {53088, 73992, -40054, -10359, 37676, 54496}},
    {false, {16508, 40245, -62074, -36376, -71638, -56256}},
    {false, {41517, 56789, 31056, 37033, 41339, 66625}},
    {false, {-70827, -68212, 7248, 41853, -32734, -16519}},
    {false, {32333, 52847, -89957, -62307, -5050, 6149}},
    {false, {-17149, -10468, -32928, -9851, 56537, 82605}},
    {true, {-84541, -54098, -58633, -36289, -12748, 2668}},
    {true, {38782, 73823, -47393, -38721, 16744, 50416}},
    {false, {39068, 59022, 21209, 55515, 34421, 52108}},
    {true, {-71216, -46104, -73471, -55003, -37496, -2060}},
    {false, {-42432, -23889, -86804, -68846, -3653, 23244}},
    {false, {-16056, 17364, -72921, -54772, -40563, -21696}},
    {false, {-25993, -10482, 18139, 45085, -86836, -55465}},
    {false, {-6145, 6154, 15388, 23210, -89142, -68482}},
    {true, {46085, 67991, -73185, -44337, -45070, -27405}},
    {true, {65191, 77310, 644, 12100, 6335, 26349}},
    {true, {61530, 80630, 33572, 40611, 3139, 25295}},
    {false, {-22306, -1057, -64514, -54752, 50646, 59125}},
    {false, {-31245, 428, -69703, -42002, 33460, 67700}},
    {false, {18783, 26105, 57879, 76612, -46736, -17226}},
    {true, {65144, 85202, -34414, -9442, -15694, -3293}},
    {true, {-30025, -19969, 2384, 18772, -85674, -56255}},
    {true, {-21671, -1706, -88695, -66277, -32871, -31219}},
    {false, {41938, 56563, 36056, 55655, 29417, 39627}},
    {false, {-35141, -13943, 51556, 73844, 12868, 28552}},
    {false, {-62811, -35918, -44104, -21236, 35127, 62940}},
    {true, {62916, 82143, 7866, 27555, 17805, 50739}},
    {true, {29498, 66404, -38144, -7002, 52432, 62757}},
    {false, {-40743, -17461, -3977, 27203, -82649, -69934}},
    {true, {61462, 87066, -29424, 1075, -53444, -28127}},
    {false, {-20296, 755, -68543, -34376, 45810, 71640}},
    {false, {-69466, -36179, -62860, -52547, -31500, -5258}},
    {false, {44866, 53371, -24236, -6665, -73108, -53122}},
    {false, {-79007, -53057, -17042, 5274, 22078, 36248}},
    {false, {-57167, -28268, -51111, -32915, -77704, -38825}},
    {false, {-4958, 9484, 5801, 13607, 74030, 98668}},
    {true, {-35563, -13589, 42209, 54631, 44769, 75384}},
    {false, {-60812, -37640, -63777, -55796, 24372, 34208}},
    {false, {-46941, -16156, -36595, -17426, -79732, -64679}},
    {true, {-59888, -28115, 12521, 32347, -78750, -58674}},
    {true, {72376, 82684, 4253, 30848, -40351, -9522}},
    {false, {-32933, -1254, -75313, -57763, -49186, -39785}},
    {true, {23434, 55093, 46836, 66125, 36750, 49491}},
    {true, {-46482, -28852, -3093, 26488, 52024, 72731}},
    {true, {43735, 78088, -44597, -11422, -45272, -31611}},
    {false, {9842, 13060, -32334, -18544, -81402, -71916}},
    {true, {4162, 7921, -99019, -65156, -19030, 4628}},
    {true, {54190, 69481, -597, 28621, -39799, -25080}},
    {false, {41810, 71069, -60566, -49113, -28756, -6676}},
    {false, {-79628, -67314, -10495, 9141, -1753, 22526}},
    {true, {-80854, -54338, -47067, -35714, -41157, -4068}},
    {false, {7961, 36511, -68928, -39346, 42154, 66633}},
    {true, {55071, 86104, -26491, -12993, 35080, 46483}},
    {true, {16937, 38277, 45614, 76853, -68179, -32041}},
    {true, {-59142, -45042, -44541, -15747, 38408, 54791}},
    {true, {-8928, 11676, -46464, -33539, -75322, -62649}},
    {true, {-25001, -1799, 60438, 82665, -6409, 20165}},
    {true, {-73110, -45573, -56868, -33358, 8495, 25515}},
    {true, {-1691, 18521, 60075, 85944, -2617, 10836}},
    {false, {17339, 45519, 46033, 72006, 37649, 43076}},
    {false, {-79475, -70079, 3154, 12209, -24437, -12055}},
    {false, {46696, 52595, -51367, -22325, -49480, -29533}},
    {false, {45715, 64763, -22780, -16581, -78193, -55110}},
    {false, {-16579, 2489, -64160, -54806, 41992, 63536}},
    {false, {-55417, -30493, -88205, -51837, -3486, 19240}},
    {false, {-77740, -75400, -16116, 7915, -31057, -18206}}};

class reactor
{
public:
    reactor(const vector<pair<bool, array<long, 6>>> &_input, long area = -1)
    {
        rebootsequence.clear();

        for (auto elem : _input)
        {
            rebootsequence.push_back(make_pair(elem.first, array<pair<long, long>, 3>({make_pair(elem.second[0], elem.second[1]),
                                                                                       make_pair(elem.second[2], elem.second[3]),
                                                                                       make_pair(elem.second[4], elem.second[5])})));
        }
        //printRebootSequences();
        optimizeRebootSequence(area);
        {
            //printRebootSequences();
        }
    }

    /*
     * Existing Cuboid:             *********************************
     * New Cubes:
     *                      **********************************************
     *                      ****
     *                      ***********
     *                                       *********
     *                                                     ***************
     *                                                                 ***
     */
    void optimizeRebootSequence(long split = -1)
    {
        array<set<long>, 3> splitlist;

        for (auto elem : rebootsequence)
        {
            for (int dim = 0; dim < 3; ++dim)
            {
                splitlist[dim].insert(elem.second[dim].first);
                splitlist[dim].insert(elem.second[dim].second);
            }
        }
        if (split != -1)
        {
            for (int dim = 0; dim < 3; ++dim)
            {
                splitlist[dim].insert(split);
                splitlist[dim].insert(-1 * split);
            }
        }

        // No need to split the min/max-borders
        for (int dim = 0; dim < 3; ++dim)
        {
            splitlist[dim].erase(splitlist[dim].begin());
            splitlist[dim].erase(--splitlist[dim].end());
        }

        for (int dim = 0; dim < 3; ++dim)
        {
            vector<pair<bool, array<pair<long, long>, 3>>> oldrebootsequence(rebootsequence);
            rebootsequence.clear();

            bool optimized = false;

            for (auto rs : oldrebootsequence)
            {
                long dimmin = rs.second[dim].first;
                long dimmax = rs.second[dim].second;
                if (dimmin != dimmax)
                {
                    for (auto split : splitlist[dim])
                    {
                        if (dimmin <= split && split <= dimmax)
                        {
                            auto rstemp = rs;
                            if (dimmin < split)
                            {
                                rstemp.second[dim].second = split - 1;
                                rebootsequence.push_back(rstemp);
                            }
                            rstemp.second[dim].first = split;
                            rstemp.second[dim].second = split;
                            rebootsequence.push_back(rstemp);
                            dimmin = split + 1;
                        }
                    }
                    if (dimmin <= dimmax)
                    {
                        auto rstemp = rs;
                        rstemp.second[dim].first = dimmin;
                        rstemp.second[dim].second = dimmax;
                        rebootsequence.push_back(rstemp);
                    }
                }
                else
                {
                    rebootsequence.push_back(rs);
                }
            }
        }
    }

    string getRebootSequence(pair<bool, array<pair<long, long>, 3>> sequence)
    {
        stringstream ret;
        ret << sequence.first << " ";
        for (int dim = 0; dim < 3; ++dim)
        {
            ret << sequence.second[dim].first << ".." << sequence.second[dim].second << ", ";
        }
        return ret.str();
    }

    void printRebootSequences()
    {
        cout << "---------------------" << endl;
        for (auto elem : rebootsequence)
            cout << "| " << getRebootSequence(elem) << endl;
        cout << "---------------------" << endl;
    }

    void reboot()
    {
        cuboids.clear();

        for (auto elem : rebootsequence)
        {
            if (elem.first)
            {
                cuboids[elem.second] = 1;

                for (int dim = 0; dim < 3; ++dim)
                {
                    cuboids[elem.second] *= elem.second[dim].second - elem.second[dim].first + 1;
                }
            }
            else
            {
                cuboids[elem.second] = 0;
            }
        }
    }

    uint64_t getOn(long area = -1)
    {
        uint64_t retval = 0;

        for (auto cuboid : cuboids)
        {
            bool addit = true;
            if (area != -1)
            {
                for (int dim = 0; dim < 3; ++dim)
                {
                    if (abs(cuboid.first[dim].first) > area || abs(cuboid.first[dim].second) > area)
                        addit = false;
                }
            }
            if (addit)
                retval += cuboid.second;
        }

        return retval;
    }

private:
    vector<pair<bool, array<pair<long, long>, 3>>> rebootsequence;
    map<array<pair<long, long>, 3>, uint64_t> cuboids;
};

TEST_CASE("Small Test")
{
    reactor testreactor(inputSmallTest);
    //testreactor.printRebootSequence ();
    testreactor.reboot();
    REQUIRE(39 == testreactor.getOn());
}

TEST_CASE("Testdata")
{
    reactor testreactor(inputTest,50);
    testreactor.printRebootSequences ();
    testreactor.reboot();
    REQUIRE(39 == testreactor.getOn(50));
}