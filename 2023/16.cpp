#include <algorithm>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <vector>

#include <catch2/catch_test_macros.hpp>

using namespace std;

const vector<string> inputTestdata = {
    ".|...\\....",
    "|.-.\\.....",
    ".....|-...",
    "........|.",
    "..........",
    ".........\\",
    "..../.\\\\..",
    ".-.-/..|..",
    ".|....-|.\\",
    "..//.|...."
};

const vector<string> inputData = {
    "\\..\\.|.........|..|................................................................./.-............./-....../.",
    "............../..--.../...................-....|.......................\\../...|..-....\\...-|...-...........\\..",
    ".......\\......................................|..-\\.................-..-......................................",
    "........\\..............|......................\\........./..............................|..............||......",
    ".........|........|......-...........|....../....-.../.....|/.........-..../.../..........................|...",
    "..\\............................./\\............................................................................",
    "........|....................\\............................./.....|\\|..-....../............/..-..........\\.....",
    "...\\.........................\\.............|.........../..............-..../.............../-.................",
    ".||....../..............\\.|...............-......................|-..-......../.|.............................",
    "...|.|.....-...../.............-............./............\\.\\/........|.............................\\|.-..\\.-.",
    "............./....................|.......|.....\\..\\..............................-.../....|..................",
    "./......./.|...............\\................................................||................................",
    "......\\......|.................|........../......|\\|.......-|..................|.....-.-.||../.\\..............",
    "................../...............|.....\\........-...-.\\...||..\\...........\\............|.........|...........",
    "...-........|\\|........././/............|...........\\.../\\...|.......-........\\....................-..........",
    "..../...........\\.........................../......-.|...................................../..\\........|......",
    "\\...............\\/......./........-..............|..............--........../....|..-.\\...........-........./.",
    "..........\\........\\|.........|\\.........../........................../.........|............\\..........|.....",
    "...........\\....|/.|..........-..............-....-|...\\..........-.../............./.........................",
    "..\\..\\......../...\\\\....................../...../.........................|.....\\..............|..\\...-.......",
    "...........................-./...................................-/.\\.....\\...................\\.../...........",
    "..-..................|..................-...\\.......|../............./|-............/........|.......|..-.....",
    "...........-......................-.................|............../.......-./..........|....../..............",
    ".........|.............././...............|..../..............|.........|.....|..\\......................|.....",
    "......./-/...................\\\\..\\......|........................\\...\\....../.....................|...-.......",
    ".....|.......................|............|...|........|...........-....../..................-...-............",
    ".../................../......|...........................-............|.............-........./............|..",
    ".-.........|.............|-...../..............................\\................|........................../..",
    ".........../.........-.......|..-.........................-...............-...-.../...................../.....",
    "../.......-../....................-...\\...\\........................-.............-...\\...../.|.........../....",
    "............-...............|........................................../...\\.|....|........-.....\\|...........",
    ".....................|\\............................-..-....../..-|..../..................\\................\\...",
    ".\\.................-......\\...|............................./......./.........-............../................",
    ".\\.........././............../|......\\/..............\\........................|........................|...-..",
    ".............../.........|.................................-.......\\\\.\\-..........-......................./-..",
    "-.|......................|.............|............................/....................|...........-........",
    "../.....-.......|.....-.....\\.../\\........|.............|.........\\./..//\\................|.........-.....||..",
    ".\\..\\.......|......./............\\..\\.........../........-.../.|..............-..../....\\.........../.\\.\\.....",
    ".............|..........|.........|.|...\\-......................-..............|.../............./.........|..",
    "....|................................................../...........-......-/......................-.....-.....",
    "............................./.........-............................./..................\\..........\\..../.....",
    ".....|.....................-.........../.......|..................-.......\\...|\\...|......\\.....\\...|.........",
    "........|............../..../|.|......-................|...../..........|................|...................-",
    "....../.....//..........\\.-|......|.....|..................../..............|.................................",
    "\\.-...-....\\..................\\....................|............||............................../.............",
    "............................-|...-...........-.../......-.........\\..-...|.|\\..........-...............\\.|//./",
    "....../......././.|...................|\\........../.\\.../-...\\..........\\.-..|\\../...........\\....\\..|.....\\..",
    "...............\\.../..../.................\\.......-...........\\..|..................\\\\................./.\\....",
    "............-..........-......................|.......|..|....................-......|......\\...........|.....",
    "...............\\......|.-............./............\\.../.............-|........./...............\\|\\.....|.....",
    ".\\...............|.................|...........\\......\\................\\............\\.|...\\......./...........",
    "\\...|..............-..........|...................|....-.....\\......../..........................\\........|..|",
    ".........|........./.........|....-........-...................../|./.--.......\\........................-..../",
    "..........................-.....-...............-/............................--...../........................",
    ".....................-.\\../\\..........|.....................\\.......\\.../..........|.............\\............",
    "......................../..\\.......\\...............................................\\./........................",
    "....|......\\..|\\.-........../......................\\|........\\...............\\.................|..............",
    "............................./.....|..|............-...\\.........-...\\....|......\\.............-..|...........",
    "..................-......-.....................-...........-......\\...-|-.-................\\............|/....",
    "...|....../............../..\\.......................-....\\...|.....\\..|..\\......./.................-.....-....",
    ".........-........|........../..-................................./....-.................-....................",
    ".............................-.......\\...............\\.....|......-....-.../.................\\................",
    "...../......|...................|..............-........./.............\\...\\....|.............\\.......|.......",
    ".......|............./........./......\\..../........|...........\\................................-............",
    "/...|././.......|-.|..........|................................/\\.\\.......-......-........-........\\..........",
    "../................./|.-...\\........................|........|........|...\\|.\\........................./.....-",
    "................-.........../|..............|.|/...|\\...........-.......................-..|../...............",
    "./..||........|....../........................|.................................../..............\\..|./-......",
    "/..-...../......................................\\-...........-..................\\|................../.........",
    ".............|.-......................|................-../.................-............../..............-...",
    "-.....-|-...............\\..........-...........\\.......\\........................\\.........../..../...../......",
    ".-..................../..........|.--.............................-..-....|.\\................|....|...\\......\\",
    "......./.-........................................\\....|........|...../...........|...\\|..-...................",
    "\\...............|........|.......\\|..-..|...-..|-........|........./.\\........................................",
    "/.|./....|....-...../\\..|...............................-.../........./.............-|.........-..../.-..\\....",
    "../......./...../..|........|../.....\\....\\.............-.-.................-...\\.......|.\\...........\\.......",
    "...-........./.............../..................\\.|................/..//..................|.......-..\\......-.",
    "./.............../.-..\\..........|.............-....................-....-..|...........-.....................",
    "...........|-..|........................................./\\............./-.../.................\\........\\.....",
    "................................/...........................\\.....................|.|.........................",
    ".........|............\\........................................-...../..........|........../.../......\\...\\...",
    "../.........|......./..................|........\\.../.\\.-...-......../../\\......../................../........",
    ".-........./.........|....|.|.............................................|.\\............/../.................",
    "./.........................................\\....../................../.--.....-..../.....|./.-......|.......\\.",
    ".\\..................../.-........|.........\\............\\...........\\...............|-../................\\....",
    "........................|......./.-....-....\\.|...................-......-..........|........\\.........../...|",
    ".............-......./.../......................\\.......\\............/......................................|.",
    "............-..........................-..................-.......\\--......-.....-.......|..\\..-....|........\\",
    "...............|.......\\......|....................\\.....................-.../.|......|................../....",
    "---..\\-.../.........//....\\../....|........\\....|-.........-.....|..........-|..............|...../..........|",
    "......-.............................-.........................-.........../...../.|.../................-.....|",
    ".........-.........\\..............|....\\..............-......\\......../......\\.......-\\........-.............\\",
    ".................../......................|......|.....\\..........................-..-......./....-.....-.....",
    "...\\.....................-..-....\\.......././....\\......./...........................\\..............\\\\........",
    ".................|................./.....................\\...../.\\.................\\.........|...|....|.......",
    "./............-........................\\..|...-............................./............./..\\................",
    "-............-..............|.................-..............................-..............................\\.",
    "................................/.....\\........|....-.....||............/.|.............-..|....|....-........",
    "/.........|............-./...|././..............\\./-............/......../\\.\\..././../..\\..\\..............-...",
    "..../.....................\\.........|......-...........|...\\/..........//\\.......//....-...|/.....\\..\\........",
    "../............................/...././...-....-............./.|..\\..............|...../.........-.....\\....|.",
    ".................................\\..../...-.....-.....-....|..\\.\\...../....../.............../.\\..............",
    "..................|..|.......-......\\.../....../....................................................|.......-.",
    "-./.....|...\\.....\\../.......\\..........................\\.....|.............|...................|.\\.../.../\\..",
    "..................-.....\\.............|...|.........-..-............................../............/..|.......",
    ".....................\\..../.....|......................................\\.\\............|/....................\\.",
    ".....-..\\.........-....\\..............-..........................\\.....\\....................\\.........\\.....-.",
    "\\...\\|\\...../.\\............................\\........-.........................../.......-............\\........",
    ".............................................-......\\.............|..../.......|......../.....................",
    "/.........-............./......|................-........-.............|...-..../.....\\.\\....\\................"
};

class beam {
public:
    beam(long _row, long _col, char _dir, long _rows, long _cols)
        : row(_row)
        , col(_col)
        , direction(_dir)
        , rows(_rows)
        , cols(_cols)
    {
    }

    void move()
    {
        switch (direction) {
        case 'n':
            --row;
            break;
        case 'e':
            ++col;
            break;
        case 's':
            ++row;
            break;
        case 'w':
            --col;
            break;
        default:
            break;
        }

        if (0 > row || 0 > col || rows <= row || cols <= col)
            dead = true;
    }

    bool reactOnTile(char tile)
    {
        bool split = false;

        switch (tile) {
        case '.':
            // Nothing to do
            break;
        case '-':
            if ('n' == direction || 's' == direction) {
                split = true;
                direction = 'e';
            }
            break;
        case '|':
            if ('e' == direction || 'w' == direction) {
                split = true;
                direction = 'n';
            }
            break;
        case '/':
            switch (direction) {
            case 'n':
                direction = 'e';
                break;
            case 'e':
                direction = 'n';
                break;
            case 's':
                direction = 'w';
                break;
            case 'w':
                direction = 's';
                break;
            default:
                break;
            }
            break;
        case '\\':
            switch (direction) {
            case 'n':
                direction = 'w';
                break;
            case 'e':
                direction = 's';
                break;
            case 's':
                direction = 'e';
                break;
            case 'w':
                direction = 'n';
                break;
            default:
                break;
            }
            break;
        default:
            cout << "Unexpected tile: '" << tile << '"' << endl;
            break;
        }

        return split;
    }

    void rotate180()
    {
        switch (direction) {
        case 'n':
            direction = 's';
            break;
        case 'e':
            direction = 'w';
            break;
        case 's':
            direction = 'n';
            break;
        case 'w':
            direction = 'e';
            break;
        default:
            break;
        }
    }

private:
    long rows;
    long cols;

    long row = 0;
    long col = 0;
    char direction = 'e';

    bool dead = false;

    friend class TheFloorWillBeLava;
};

class TheFloorWillBeLava {
public:
    TheFloorWillBeLava(const vector<string>& _input, bool partB = false)
        : input(_input)
        , rows(_input.size())
        , cols(_input[0].size())
    {
        cout << "Size of Input: " << rows << " rows and " << cols << " columns." << endl;
    }

    void moveBeams()
    {
        // Remove dead beams
        for (auto iter = beams.begin(); iter != beams.end();) {
            if (iter->dead) {
                iter = beams.erase(iter);
            } else {
                ++iter;
            }
        }

        // Remove beams which are in a known state
        for (auto iter = beams.begin(); iter != beams.end();) {
            if (energized[{ iter->row, iter->col }].end() != energized[{ iter->row, iter->col }].find(iter->direction)) {
                iter = beams.erase(iter);
            } else {
                energized[{ iter->row, iter->col }].insert(iter->direction);
                ++iter;
            }
        }

        // React on current tile
        vector<beam> newbeams;
        for (auto& b : beams) {
            if (!b.dead && b.reactOnTile(input[b.row][b.col])) {
                // Split Beam
                beam newbeam(b);
                newbeam.rotate180();
                newbeams.push_back(newbeam);
            }
        }

        // Add new beams to list of beams
        for (auto n : newbeams)
            beams.push_back(n);

        // Move beams
        for (auto& b : beams) {
            b.move();
        }
    }

    long getEnergized()
    {
        long en = 0;
        for (auto e : energized)
            if (e.second.size())
                ++en;

        return en;
    }

    long getResultA()
    {
        beams.clear();
        energized.clear();

        beams.push_back(beam(0, 0, 'e', rows, cols));

        while (beams.size())
            moveBeams();

        //printFloor();

        long resultA = getEnergized();

        cout << "resultA: " << resultA << endl;
        return resultA;
    }

    long getResultB()
    {
        long resultB = 0;

        for (long r = 0; r < rows; ++r) {
            beams.clear();
            energized.clear();
            beams.push_back(beam(r, 0, 'e', rows, cols));

            while (beams.size())
                moveBeams();

            if (getEnergized() > resultB)
                resultB = getEnergized();

            beams.clear();
            energized.clear();
            beams.push_back(beam(r, cols - 1, 'w', rows, cols));

            while (beams.size())
                moveBeams();

            if (getEnergized() > resultB)
                resultB = getEnergized();
        }
        for (long c = 0; c < cols; ++c) {
            beams.clear();
            energized.clear();

            beams.push_back(beam(0, c, 's', rows, cols));

            while (beams.size())
                moveBeams();

            if (getEnergized() > resultB)
                resultB = getEnergized();

            beams.clear();
            energized.clear();

            beams.push_back(beam(rows - 1, c, 'n', rows, cols));

            while (beams.size())
                moveBeams();

            if (getEnergized() > resultB)
                resultB = getEnergized();
        }

        cout << "resultB: " << resultB << endl;
        return resultB;
    }

    void printFloor()
    {
        for (long r = 0; r < rows; ++r) {
            for (long c = 0; c < cols; ++c) {
                if ('.' == input[r][c]) {
                    if (energized[{ r, c }].size())
                        cout << '*';
                    else
                        cout << '.';
                } else
                    cout << input[r][c];
            }
            cout << endl;
        }
    }

private:
    const vector<string> input;
    vector<beam> beams;
    long rows, cols;
    map<pair<long, long>, set<char>> energized;
};

TEST_CASE("Testdata")
{
    TheFloorWillBeLava TheFloorWillBeLavaData(inputTestdata);
    REQUIRE(46 == TheFloorWillBeLavaData.getResultA());
    REQUIRE(51 == TheFloorWillBeLavaData.getResultB());
}

TEST_CASE("TheFloorWillBeLava")
{
    TheFloorWillBeLava TheFloorWillBeLavaData(inputData);
    REQUIRE(7798 == TheFloorWillBeLavaData.getResultA());
    REQUIRE(8026 == TheFloorWillBeLavaData.getResultB());
}
